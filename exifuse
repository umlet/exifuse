#!/bin/bash
#=
if [[ $# == 0 ]]; then
    exec julia --color=yes --startup-file=no -e "include(\"${BASH_SOURCE[0]}\")" -i
fi
exec julia --color=yes --startup-file=no "${BASH_SOURCE[0]}" "$@"
=#

const _VERSION = "0.1.0 ALPHA"
import Juliettine: map, filter  ;  using Juliettine  ;  using FileJockey
# TODO move to FJ
# TODO carriage return on Windows
version_exiftool() = ( R=exe(["exiftool","-ver"]; fail=false); (R.exitcode!=0 || length(R.outs)!=1) ? nothing : R.outs[1] )

const l = ShortcutLs()









function main()

    F = nothing

    while length(ARGS) > 0
        opt = getopt()

        if opt in ["--version"]
            println("Exifuse $_VERSION")
            if (s = version_exiftool()) !== nothing  println("exiftool $s installed")  else  @warn "exiftool not found/installed; exify() function not available"  end

        elseif opt === nothing || opt in ["--find"]
            findpaths = getargs()
            F = find(findpaths)
            length(ARGS) == 0  &&  out(F)

        elseif opt in ["--hardlinker"]
            hardlinkdir = getarg()
            ispath(hardlinkdir)  &&  erroruser("hardlink directory '$hardlinkdir' already exist; for safety disallowed (such imports will come later)")

            F === nothing  &&  erroruser("no inputs given; use 'exifuse <dir> --hardlinker ..', or 'exifuse --find <dir> --hardlinker ..'")

            files = F |> getfiles
            X = exify(files)

            mkdir(hardlinkdir)
            hardlinker(files, X, hardlinkdir)
        end
    end
end


@main








##### INTERNAL; IGNORE THIS #####

#### tweaks for REPL
import REPL
atreplinit() do repl
    repl.prompt_color = Base.text_colors[:cyan]
    repl.interface = REPL.setup_interface(repl)

    _print_help = true

    _replmode = Base.active_repl.interface.modes[1]
    _replmode.prompt = () -> "$(basename(pwd()))/::julia> "

    _msg = "\nExfuse help topics: find ls checkdupl checkpaths exify hardlinker ext hasext exif2shortdate.."
    _replmodeH = Base.active_repl.interface.modes[3]
    _replmodeH.prompt = () -> ( if _print_help println(_msg); _print_help=false end  ;  "help?> " )

    @info "Exifuse $(_VERSION) -- exifuse.com"
    @info """\"?\" for help :: \"Ctrl+D\" to exit  ::  "]update" for latest versions"""
    # @info """Cheatsheet:
    #             ls, ll, find        get file system entries
    #             getfiles            filter entries to files only; follow symlink-to-files
    #             checkpaths          check file system entries for symlink issues
    #             checkdupl           check files for identical content
    #             exify               read EXIF data of files
    #             x.CreateDate        access EXIF values

    #             Examples:

    #             -- Explore:   Find oldest .cr2-photo:
    #             > find() |> filter(hasext("cr2")) |> exify |> map(exif2shortdate) |> minimum

    #             -- Fix:       Identify & remove duplicates:
    #             > find() |> checkpaths |> getdupl |> rm

    #             -- Organize:  Create new dir structure (using hardlinks):
    #             > find() ......

    #       """
end
####


