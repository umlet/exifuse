#!/bin/bash
#=
if [[ $# == 0 ]]; then
    exec julia --color=yes --startup-file=no -e "include(\"${BASH_SOURCE[0]}\")" -i
fi
exec julia --color=yes --startup-file=no "${BASH_SOURCE[0]}" "$@"
=#

let
    using Pkg
    _deps = ["Shelly", "CommandLiner", "https://github.com/umlet/FileJockey.jl.git"]
    deps() = [ startswith(s, "https:") ? (chop(basename(s), tail=7), s) : (s, nothing)  for s in _deps ]  # returns (packagename, url=nothing) tuples
    isinstalled(pkg::AbstractString) = pkg in [x.name for x in values(Pkg.dependencies())]
    areinstalled() = isinstalled.([x[1] for x in deps()])
    function install()
        Pkg.update()
        for (pkg,url) in deps()
            isinstalled(pkg)  &&  ( println("Package '$(pkg)' already installed and up-to-date..");  continue )
            println("Package '$(pkg)' not found; installing..")
            url === nothing  ?  Pkg.add(pkg)  :  Pkg.add(url=url)
        end
        println("\nOK -- done!  (Use 'exifuse --update' from time to time to get the latest versions.)")
    end
    update() = ( Pkg.update();  println("\nOK -- done!") )
    function uninstall()
        count(areinstalled()) == 0  &&  ( println("No exifuse packages installed.");  return )
        for (pkg,_) in deps()
            !isinstalled(pkg)  &&  continue
            println("Package '$(pkg)' found; uninstalling..")
            Pkg.rm(pkg)
        end
        println("\nOK -- done!  (Use 'exifuse --install' to re-install.)")
    end
    ARGS == ["--install"]       &&  ( install()                                                                         ; exit(0) )
    ARGS == ["--update"]        &&  ( update()                                                                          ; exit(0) )
    ARGS == ["--uninstall"]     &&  ( uninstall()                                                                       ; exit(0) )
    !all(areinstalled())        &&  ( println(stderr, "exifuse not fully installed yet.\n\nRun 'exifuse --install'.")   ; exit(2) )
end




import Shelly: ll, ldf
import CommandLiner.Iter.Hack: map, filter  ;  using CommandLiner
using FileJockey




const _VERSION = "0.2.0 ALPHA"
version_exiftool() = ( R=exe(["exiftool","-ver"]; fail=false, onlystdout=false); (R.rc!=0 || length(R.outs)!=1) ? nothing : R.outs[1] )










function main()

    E = nothing

    while length(ARGS) > 0
        opt = getopt()

        if opt in ["--version"]
            println("exifuse (script): $(_VERSION)")
            if (s = version_exiftool()) !== nothing  println("exiftool: $(s)")  else  @warn "exiftool not found/installed; exify() function not available"  end

        elseif opt === nothing || opt in ["--find"]
            findpaths = getargs()
            E = find(findpaths...)

        elseif opt in ["--hardlinker"]
            E === nothing  &&  erroruser("no inputs given; use 'exifuse <in> <in2> .. --hardlinker <out-dir>'")

            hardlinkdir = getarg()
            ispath(hardlinkdir)  &&  erroruser("hardlink directory '$hardlinkdir' already exist; for safety disallowed for now")

            files = E |> getfiles
            X = exify(files)

            mkdir(hardlinkdir)
            hardlinker(files, X, hardlinkdir)

        elseif opt in ["--exify"]
            E === nothing  &&  erroruser("no inputs given; use 'exifuse <in> <in2> .. --exify [field field2 ..]'")

            fields = getargs0()

            files = E |> getfiles
            X = exify(files)

            for x in X
                info(x)
                println("################################################################################")
            end

        else
            erroruser("unknown command line option '$opt'")
        end
    end
end


@main








########## INTERNAL ##########

### tweaks for REPL
import REPL
atreplinit() do repl
    repl.prompt_color = Base.text_colors[:cyan]
    repl.interface = REPL.setup_interface(repl)

    _print_help = true

    _replmode = Base.active_repl.interface.modes[1]
    _replmode.prompt = () -> "$(basename(pwd()))/::julia> "

    _msg = "\nExfuse help topics: find ls checkdupl checkpaths exify hardlinker ext hasext exif2shortdate.."
    _replmodeH = Base.active_repl.interface.modes[3]
    _replmodeH.prompt = () -> ( if _print_help println(_msg); _print_help=false end  ;  "help?> " )

    @info "Exifuse $(_VERSION) -- exifuse.com"
    @info """\"?\" for help  ::  \"Ctrl+D\" to exit  ::  "]update" for latest versions"""
    # @info """Cheatsheet:
    #             ls, ll, find        get file system entries
    #             getfiles            filter entries to files only; follow symlink-to-files
    #             checkpaths          check file system entries for symlink issues
    #             checkdupl           check files for identical content
    #             exify               read EXIF data of files
    #             x.CreateDate        access EXIF values

    #             Examples:

    #             -- Explore:   Find oldest .cr2-photo:
    #             > find() |> filter(hasext("cr2")) |> exify |> map(exif2shortdate) |> minimum

    #             -- Fix:       Identify & remove duplicates:
    #             > find() |> checkpaths |> getdupl |> rm

    #             -- Organize:  Create new dir structure (using hardlinks):
    #             > find() ......

    #       """
end
####


